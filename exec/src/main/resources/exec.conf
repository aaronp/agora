exec = ${agora.worker}
exec {
  port: 7770
  # The port of the exchange to connect to
  exchange {
    host: ${exec.host}
    port: ${exec.port}
  }

  streamingSubscription = ${exec.subscription}
  streamingSubscription {
    # contains JMatcher json used to match jobs on their job's json
    jobMatcher {
      and : [
        {
          exists.parts: [{name: "command"}]
        },
        {
          not.exists.parts: [{name: "workspaceId"}]
        }
      ]
    }

    details {
      name: "streaming execute"
      path: "rest/exec/stream"
      topic: "streaming-execute"
    }

    # contains JMatcher json used to match jobs on their submission's details
    submissionMatcher: "match-all"
  }

  # a side-effecting subscription
  runSubscription = ${exec.streamingSubscription}
  runSubscription {
    # contains JMatcher json used to match jobs on their job's json
    jobMatcher {
      and : [
        {
          exists.parts: [{name: "command"}]
        },
        {
          exists.parts: [{name: "workspaceId"}]
        }
      ]
    }

    details {
      name: "execute"
      path: "rest/exec/run"
      topic: "execute"
    }
  }

  # contains a list of all the subscriptions to make on startup in groups.
  # each group will use the same subscription reference, effectively sharing
  # their 'take' requests
  execSubscriptions : [${exec.streamingSubscription} , ${exec.runSubscription} ]

  # how often should we update the subscriptions w/ health info?
  healthUpdateFrequency : "3s"

  # The timeout after uploads
  uploadTimeout: 10s

  # The 'errorLimit' truncates the stderr after the configured amount of lines
  errorLimit: 200

  # the name of the actor system
  actorSystemName = "executor"

  # contains the elements all 'dir' configs need (e.g. uploads, workingDirectory, logs)
  basePathConf: {
    appendJobId: true
    mkDirs: false
    dir: ""
  }

  # The upload configuration
  uploads: ${exec.basePathConf}
  uploads.dir = "workspaces"
  uploads.mkDirs = true

  # The logs configuration
  logs: ${exec.basePathConf}
  logs.appendJobId = true

  # Used to configure the Framing.delimiter used to frame the response output
  defaultFrameLength: 1024

  # Used to configure the Framing.delimiter used to frame the response output
  allowTruncation: true

  # when the exchange sends us work, it auto-decrements the worker's request in anticipation
  # that we'll send it work. If we error, that worker will be left w/ one less work item
  replaceWorkOnFailure: true

  # The ExecConfig.newLogger creates the logger used when running processes. If this flag is set to true,
  # then each process's output will be logged (std out to INFO, std err to ERROR)
  includeConsoleAppender: false

  # when set, The worker will also act as an Exchange
  includeExchangeRoutes: true


  # treated as a map of entries added to each command run by default
  runnerEnv {
    # put key : values here
  }

  # The number of work items to request from the exchange on startup
  initialRequest: 10

  #override the worker details from the worker.conf
  details: {
    path: "exec"
    name: "execute"
  }
}
