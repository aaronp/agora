include "exec-api.conf"
exec = ${agora.worker}
exec {
  host: ${?EXEC_HOST}

  port: 7770
  port: ${?EXEC_PORT}

  # The port of the exchange to connect to
  exchange {
    host: ${exec.host}
    host: ${?EXCHANGE_HOST}

    port: ${exec.port}
    port: ${?EXCHANGE_PORT}
  }

  # the housekeeping config for cleaning up logs, reports, workspaces, etc
  housekeeping {
    removeEventsOlderThan: 1day
    removeWorkspacesOlderThan: 1day
    checkEvery: 1h
  }

  # the location where uploaded data and executed commands should exist
  workspaces: {
    mkDirs: true
    dir: ${?DATA_DIR}"workspaces"
    dir: ${?WORKSPACES_DIR}

    # This was raised under issue#1 in Github: If FileA.txt is created on the file-system,
    # We may still get user-initiated requests to check the workspace if our dependencies exist.
    # When we create this file under a workspace, the '.FileA.txt.metadata' is created w/ the expected size of FileA.txt
    #
    # Should an asyc-request to check/refresh the workspace comes in and the file size doesn't match the expected
    # Metadata size, then we will re-check the file periodically according to this check
    bytesReadyPollFrequency : 200ms
  }

  # event monitor events, such as tracking of events which can be queried
  eventMonitor {
    on: true
    dir: ${?DATA_DIR}"events"
    dir: ${?EVENTS_DIR}
  }

  # when enabled, requests will check a .cache directory in their workspace before returning a result
  enableCache: true

  runSubscription = ${exec.subscription}
  runSubscription {
    # contains 'JPredicate' json used to match jobs on their job's json
    jobCriteria {
      select.parts: ["command"]
      test : "match-all"
    }

    details {
      name: "streaming execute"
      path: "rest/exec/run"
    }

    # contains 'JPredicate' json used to match jobs on their submission's details
    submissionCriteria: "match-all"
  }

  # contains a list of all the subscriptions to make on startup in groups.
  # each group will use the same subscription reference, effectively sharing
  # their 'take' requests
  execSubscriptions: [${exec.runSubscription}]

  # how often should we update the subscriptions w/ health info?
  healthUpdateFrequency: "3s"

  # The timeout after uploads
  uploadTimeout: 10s

  # The 'errorLimit' truncates the stderr after the configured amount of lines
  errorLimit: 200

  # the name of the actor system
  actorSystemName = "executor"

  # Used to configure the Framing.delimiter used to frame the response output
  defaultFrameLength: 1024

  # when set, The worker will also act as an Exchange
  includeExchangeRoutes: true

  # The number of work items to request from the exchange on startup
  initialRequest: 10


  # treated as a map of entries added to each command run by default
  runnerEnv {
    # put key : values here which should be included by default on RunProcess jobs
  }
  # a list of system environemnt variables which should be taken from the host OS to include in jobs
  runnerEnvFromHost : []

  #override the worker details from the worker.conf
  details: {
    path: "exec"
    name: "execute"
  }
}
