client {
  actorSystemName : "client"

  # If empty, then the value for 'agora.*.host' is used, and the value '0.0.0.0' is taken to be 'localhost'
  # If set, the environment variable 'CLIENT_HOST' is used
  # See ServerConfig.clientConfig where it fixes up the client hostname
  host: ""
  host: ${?CLIENT_HOST}

  # If set to 0, then the value from 'agora.*.port' is used
  # Otherwise when set, the environment variable 'CLIENT_PORT' is used
  port: 0
  port: ${?CLIENT_PORT}

  # akka actor system overloads
  akka {
    daemonic = on
    stdout-loglevel = "ERROR"
    loglevel = "WARNING"
  }

  # used to configure a retrying-client, to configure RetryClient.RetryStrategy
  clientFailover: {

    # used by limiting strategy
    nTimes: 10
    within: 10s

    # use by the throttled strategy
    throttle-delay: 200ms

    # one of either limiting, throttled
    strategy: "limiting"
  }

  # the additional submission details used to determine the job's interaction w/ the
  # exchange, as well
  submissionDetails {

    # contains any additional details to add to the submission details to expose to potential workers
    details: {
      submissionUser: ""
      submissionUser: ${?USER}
    }

    # contains 'JPredicate' json used to evaluate WorkDetails subscription data in order to find eligible workers
    matcher: "match-all"

    # whether jobs should be submitted to the exchange asynchronously or not (fire and forget vs await a worker)
    awaitMatch: true

    # given a match of a job w/ N workers, the selection mode used to determine
    # which of those workers should be chosen.
    #
    # The value can be one of:
    # 1) 'select-one' to choose a single worker
    # 2) 'select-all' to send to all the matched workers
    # 3) 'select-N' where N is an integer -- send to N workers
    # 4) 'select-first' to choose all elegible workers but only return the first returned result
    # 5) 'max' or 'min', followed by a 'jpath' used to obtain an integer value from the
    #    workers' subscription data.
    #
    # e.g.
    #
    # {
    #   max : {
    #     parts : [ { "name" : "machine" }, { "name" : "cpus" } ]
    #   }
    # }
    #
    # where 'parts' is the JPath describine the values at 'machine.cpus'.
    # Given multiple matching workers, on the of the workes with the 'max' value for
    # 'machine.cpus' will be chosen
    #
    selectionMode : "select-one"

    # a list of fall-back matches should non of the work subscriptions match.
    # the array should contain json matchers w/ the config key 'match', e.g.:
    # orElse : [ {
    #   match : match-all
    # }]
    orElse : [ ]
  }
}
